import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.github.robwin:jgitflow-gradle-plugin:0.5.0'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    id 'findbugs'
    id 'jacoco'
    id 'maven-publish'
    id 'org.springframework.boot'               version '1.5.2.RELEASE'
    id 'com.jfrog.artifactory'                  version '4.4.14'
    id 'com.bmuschko.docker-remote-api'         version '3.0.8'
}

apply plugin: 'io.github.robwin.jgitflow'

/***************************
 * dependency management
 ***************************/

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://airdev.jfrog.io/airdev/libs-releases/"}
    maven { url "https://airdev.jfrog.io/airdev/libs-snapshots/" }
}

dependencies {
    compile 'org.opentestsystem.ap:ap-common:0.1.25-SNAPSHOT'

    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'

    compile 'org.springframework.cloud:spring-cloud-starter-config'

    compile 'org.springframework.security.extensions:spring-security-saml2-core:1.0.2.RELEASE'
    compile 'org.springframework.retry:spring-retry'
    compile 'org.springframework.session:spring-session'

    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'

    compile 'com.google.guava:guava:21.0'

    compile 'io.springfox:springfox-swagger2:2.6.1'
    compile 'io.springfox:springfox-swagger-ui:2.6.1'

    compile 'org.apache.httpcomponents:httpclient:4.5.3'

    compileOnly 'org.projectlombok:lombok'

    runtime 'org.springframework.boot:spring-boot-devtools'

    testCompile 'org.springframework.boot:spring-boot-starter-test'

    testCompile 'org.projectlombok:lombok'
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE'
    }
}

/***************************
 * build information
 ***************************/

springBoot {
    buildInfo()
}

processResources {
    filesMatching("**/application.yml") {
        expand project.properties
    }
}

/***************************
 * maven publishing
 ***************************/

 task sourceJar(type: Jar) {
     from sourceSets.main.allJava
 }
 
publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        artifact sourceJar {
          classifier "sources"
        }
    }
}

artifactory {
    contextUrl = artifactoryUrl

    publish {
        repository {
            repoKey  = project.version.contains('-SNAPSHOT') ? project.artifactorySnapshotPublish : project.artifactoryReleasePublish
            username = project.artifactoryUser
            password = project.artifactoryPassword
            maven	 = true
        }
        defaults {
            publications ('mavenJava')
        }
    }
}

/***************************
 * kubernetes (k8s)
 ***************************/

task k8sCopyFiles(type: Copy) {

    from('src/main/kubernetes/') {
        filter(ReplaceTokens, tokens: [version: project.version,
                                       dockerTagBase: project.dockerTagBase,
                                       kubecfgState: project.kubecfgState,
                                       kubecfgName: project.kubecfgName])
    }

    into 'build/kubernetes'
}

task k8sCopyFilesUat(type: Copy) {

    from('src/main/kubernetes/') {
        filter(ReplaceTokens, tokens: [version: project.version,
                                       dockerTagBase: project.dockerTagBase,
                                       kubecfgState: project.kubecfgState,
                                       kubecfgName: project.kubecfgNameUat])
    }

    into 'build/kubernetes'
}


/***************************
 * docker
 ***************************/

docker {
    registryCredentials {
        username = project.dockerHubUser
        password = project.dockerHubPassword
        email = project.dockerHubEmail
    }
}

task dockerCopyFiles(type: Copy) {
    dependsOn 'bootRepackage'

    from('src/main/docker/') {
        filter(ReplaceTokens, tokens: [USER_HOME:           System.env.HOME,
                                       configServerVersion: project.configServerVersion,
                                       version:             project.version,
                                       dockerTagBase:       project.dockerTagBase])
    }

    from("build/libs/${jar.archiveName}") {
        // drop version from artifact name
        rename { String fileName ->
            fileName.replace("-${project.version}", "")
        }
    }

    into 'build/docker'


}

task dockerCopyViewerFiles(type: Copy, dependsOn: "dockerCopyFiles") {
    from("cots/previewer.war")
    into('build/docker/ivs')
}

task dockerBuildImage(type: DockerBuildImage) {
    dependsOn 'dockerCopyFiles'
    inputDir = project.file('build/docker/')
    tag = "${project.dockerTagBase}/${jar.baseName}:${project.version}"
}

task dockerBuildViewerImage(type: DockerBuildImage) {
    dependsOn 'dockerCopyViewerFiles'
    inputDir = project.file('build/docker/ivs')
    tag = "${project.dockerTagBase}/${project.dockerArtifactName}:${project.version}"
}

task dockerPushImage(type: DockerPushImage) {
    dependsOn 'dockerBuildImage'
    imageName = "${project.dockerTagBase}/${jar.baseName}:${project.version}"
}

task dockerRemoveImage(type: DockerRemoveImage) {
    imageId = "${project.dockerTagBase}/${jar.baseName}:${project.version}"
}

/***************************
 * Checkstyle
 ***************************/

checkstyle {
    ignoreFailures = true
}

/***************************
 * PMD
 ***************************/

pmd {
    ignoreFailures = true

    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

/***************************
 * FindBugs
 ***************************/

findbugs {
    ignoreFailures = true
    reportLevel = "medium"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
	    html.stylesheet resources.text.fromFile('config/findbugs/findbugs-color.xsl')
    }
}

/***************************
 * gradle wrapper
 ***************************/

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

/***************************
 * Lifecycle enhancements
 ***************************/

tasks.artifactoryPublish.dependsOn 'build'

test.finalizedBy(jacocoTestReport)
